/**
 * AJITO テーマ - メインスクリプト
 * 圧縮済み版 (script.min.js)
 */

document.addEventListener('DOMContentLoaded', function() {
  'use strict';
  
  // 要素の取得
  const header = document.querySelector('.site-header');
  const menuToggle = document.querySelector('.menu-toggle');
  const globalNav = document.querySelector('.global-nav');
  const scrollLinks = document.querySelectorAll('a[href^="#"]:not(.no-scroll)');
  const faqQuestions = document.querySelectorAll('.faq-question');
  
  // スクロール時のヘッダー背景変更
  function checkScroll() {
    if (window.scrollY > 50) {
      header.classList.add('scrolled');
    } else {
      header.classList.remove('scrolled');
    }
  }
  
  // 初期ロード時にもチェック
  checkScroll();
  window.addEventListener('scroll', checkScroll);
  
  // ハンバーガーメニュートグル
  if (menuToggle && globalNav) {
    menuToggle.addEventListener('click', function() {
      this.classList.toggle('open');
      globalNav.classList.toggle('open');
      
      // アクセシビリティのためにaria-expanded属性を更新
      if (this.classList.contains('open')) {
        this.setAttribute('aria-expanded', 'true');
      } else {
        this.setAttribute('aria-expanded', 'false');
      }
    });
  }
  
  // スムーススクロール
  scrollLinks.forEach(function(link) {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      
      const targetId = this.getAttribute('href');
      const target = document.querySelector(targetId);
      
      if (target) {
        const headerHeight = header.offsetHeight;
        const position = target.getBoundingClientRect().top + window.pageYOffset - headerHeight;
        
        window.scrollTo({
          top: position,
          behavior: 'smooth'
        });
        
        // SPメニューを閉じる
        if (window.innerWidth < 768 && menuToggle && menuToggle.classList.contains('open')) {
          menuToggle.classList.remove('open');
          menuToggle.setAttribute('aria-expanded', 'false');
          globalNav.classList.remove('open');
        }
      }
    });
  });
  
  // ギャラリースライダー初期化
  const gallerySlider = document.querySelector('.gallery-slider .galleryList');
  if (gallerySlider && typeof jQuery !== 'undefined' && typeof jQuery.fn.slick !== 'undefined') {
    // 遅延読み込みのためにsetTimeoutを使用
    setTimeout(function() {
      jQuery(gallerySlider).slick({
        dots: true,
        arrows: true,
        autoplay: true,
        autoplaySpeed: 4000,
        slidesToShow: 3,
        slidesToScroll: 1,
        centerMode: true,
        centerPadding: '0',
        lazyLoad: 'ondemand',
        responsive: [
          {
            breakpoint: 992,
            settings: {
              slidesToShow: 2,
              centerMode: false
            }
          },
          {
            breakpoint: 576,
            settings: {
              slidesToShow: 1,
              centerMode: false
            }
          }
        ]
      });
    }, 800);
  }
  
  // FAQのトグル機能
  if (faqQuestions.length > 0) {
    faqQuestions.forEach(function(question) {
      question.addEventListener('click', function() {
        const answer = this.nextElementSibling;
        const faqItem = this.closest('.faq-item');
        
        if (answer && faqItem) {
          if (answer.style.display === 'flex') {
            answer.style.display = 'none';
            faqItem.classList.remove('open');
          } else {
            answer.style.display = 'flex';
            faqItem.classList.add('open');
          }
        }
      });
    });
  }
  
  // 画像の遅延読み込み
  const lazyImages = document.querySelectorAll('img[loading="lazy"]');
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver(function(entries) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          const lazyImage = entry.target;
          if (lazyImage.dataset.src) {
            lazyImage.src = lazyImage.dataset.src;
            lazyImage.removeAttribute('data-src');
          }
          imageObserver.unobserve(lazyImage);
        }
      });
    });
    
    lazyImages.forEach(function(image) {
      imageObserver.observe(image);
    });
  } else {
    // IntersectionObserverがサポートされていない場合のフォールバック
    let active = false;
    
    const lazyLoad = function() {
      if (active === false) {
        active = true;
        
        setTimeout(function() {
          lazyImages.forEach(function(lazyImage) {
            if (
              (lazyImage.getBoundingClientRect().top <= window.innerHeight && 
               lazyImage.getBoundingClientRect().bottom >= 0) && 
              getComputedStyle(lazyImage).display !== 'none'
            ) {
              if (lazyImage.dataset.src) {
                lazyImage.src = lazyImage.dataset.src;
                lazyImage.removeAttribute('data-src');
              }
              
              lazyImages = Array.from(lazyImages).filter(function(image) {
                return image !== lazyImage;
              });
              
              if (lazyImages.length === 0) {
                document.removeEventListener('scroll', lazyLoad);
                window.removeEventListener('resize', lazyLoad);
                window.removeEventListener('orientationChange', lazyLoad);
              }
            }
          });
          
          active = false;
        }, 200);
      }
    };
    
    document.addEventListener('scroll', lazyLoad);
    window.addEventListener('resize', lazyLoad);
    window.addEventListener('orientationChange', lazyLoad);
    lazyLoad();
  }
  
  // アニメーション要素（必要に応じて）
  const animatedElements = document.querySelectorAll('.fadeIn, .slideInRight');
  if ('IntersectionObserver' in window && animatedElements.length > 0) {
    const animationObserver = new IntersectionObserver(function(entries) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          entry.target.classList.add('animated');
          animationObserver.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1
    });
    
    animatedElements.forEach(function(element) {
      element.classList.remove('animated');
      animationObserver.observe(element);
    });
  }
  
  // Google Mapsの遅延読み込み
  const mapWrapper = document.querySelector('.map-wrapper');
  if (mapWrapper) {
    const mapObserver = new IntersectionObserver(function(entries) {
      if (entries[0].isIntersecting) {
        const iframe = mapWrapper.querySelector('iframe');
        if (iframe && iframe.dataset.src) {
          iframe.src = iframe.dataset.src;
          iframe.removeAttribute('data-src');
        }
        mapObserver.disconnect();
      }
    });
    mapObserver.observe(mapWrapper);
  }
});
